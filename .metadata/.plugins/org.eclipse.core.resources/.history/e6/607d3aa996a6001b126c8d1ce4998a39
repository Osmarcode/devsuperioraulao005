package com.osmarcode.myfirstproject.entities;

import java.io.Serializable;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;


//JPA É UMA FERRAMENTA PARA MAPEAMENTO DE OBJETOS PARA SEREM 
//TRADUZIDOS PARA SEREM UTILIZADOS EM TABELS DE ENTIDADE RELACIONAL

@Entity //para se referir a uma entidade de um db relacional
public class Product implements Serializable{
	private static final long serialVersionUID = 1L;
	
	@Id //para mapear o Id de Product e mostrar que será a PK
	//GERANDO UM VALOR ID AUTO INCREMENTÁVEL
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String name;
	private Double price;
	
	//**********composição de objetos assistir aulão 004

	@ManyToOne //RELAÇÃO MUITOS P/ 1(MUITOS PRODUTOS PARA 1 CATEGORIA)
	//PARA IDENTIFICAR UMA COLUNA ESTRANGEIRA E REFERENCIÁ-LA
	//NESSE CASO É A "category_id" que vem da classe category
	@JoinColumn(name = "category_id") 
	private Category category;

	public Product() {
	}

	
	public Product(Long id, String name, Double price, Category category) {
		super();
		this.id = id;
		this.name = name;
		this.price = price;
		this.category = category;
	}

	
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Double getPrice() {
		return price;
	}

	public void setPrice(Double price) {
		this.price = price;
	}

	public Category getCategory() {
		return category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}


	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Product other = (Product) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}
}


/*COMPOSIÇÃO DE UMA CLASSE
 * CRIAR CONSTRUCTOR VAZIO
 * CRIAR CONSTRUCTOR COM USING FIELDS
 * CRIAR GET E SETS
 * CRIAR HASHCODE E EQUALS MARCANDO APENAS ID 
 * PARA SERVIR COMO REFERÊNCIA DE COMPARAÇÃO
 * POR QUE ID É UM ELEMENTO QUE NÃO PODE SE REPETIR
 * IMPLEMENTS SERIALIZABLE E CLICA NO AMARELO
 * add default SERIALID VERSION
 * */


